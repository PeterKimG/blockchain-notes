directory 구조
/bin: fabirc binary fine(*.exe) 들이 있는곳

각 노드를 구동하는 프로그램
인증서를 생성하는 프로그램
genesis block을 생성하는 프로그램

문제
docker exec ~~ /bin/bash 들을 실행하는데,
docker exec ~~ /*.sh 는 window 뭐 문제로 수동으로 실행해줘야 할 것.

/first-network: 네트워크(노드) 셋팅 샘플코드
- 인증서 생성
- 채널정보, 제네시스 정보 생성
- 노드 실행
- 노드 연결
- 체인코드 설치
- 체인코드 배포
- 체인코드 실행

/chaincode-docker-devmode: 체인코드 개발모드 샘플
- 체인코드 설치
- 체인코드 배포
- 체인코드 실행

/fabcar: dapp 개발 샘플코드
- 관리자 생성
- 유저등록
- 조회
- 트랜잭션 발생

docker stop $(docker ps -qa)   - 모든컨테이너 멈춤
docker rm $(docker ps -qa) 모든 컨테이너삭제
$ docker network prune
$ docker volume prune
$ docker system prune

윤창흠은 천재래

/fabric-sample\first-network\ 내
channel-artifacts 와 crypto-config 삭제

scripts folder 내 .sh file들은 용량이 큰만큼 많은 data를 가지고 있음

.gitkeep: github에 소스코드를 올릴때 빈 디렉토리도 올려라 는 의미
.env: 환경변수를 저장하는 파일

vs code로 열어보면 내용이 나옴
환경변수에서 path도 gopath?

compose_project_name=net -> 이 그 환경변수 설정

.gitignore: github에 코드를 올릴때 올리고 싶지 않은 파일 혹은 디렉토리 리스트 관리
이 안에 포함된 내용들은 github에 올라가지 않음
file list에 비활성화 된 양 어두은 글씨로 표현됨

.sh shell script file 들은 나중에 다 봐야된데.  yaml도

많은 봐야하는 파일들 중에서는
byfn.sh
configtx.yaml
crypto-config.yaml
docker-compose-cli.yaml
\scripts\script.sh
\scripts\utils.sh
\base\docker-compose-base.yaml
\base\peer-base
위 8개 파일은 필수 first-network 내에서만

chaincode folder 에서는
chaincode_example02\chaincode_example02.go 를 봐야함

부트스트랩
vue.js(front-end)
js(node.js)-express, db, css
지갑
리믹스
java-spring?

byfn.sh 에서
~468은 함수정의
468~ 정의함수 실행

$표시의 명령어는 terminal에서 입력된 값을 그대로 가져와서 사용하는 것.
그래서 560~ 들은 값을 비교+호출

printhelp function = help 출력

shellcode 실행할떈 얘가 shellcode 라는걸 알려주기위해서
./ -> 을 붙여야해 환경변수 설정 어쩌구

./byfn.sh --help 를 입력하면 help 만 뜬대


$ ./byfn.sh --help
Usage:
  byfn.sh <mode> [-c <channel name>] [-t <timeout>] [-d <delay>] [-f <docker-compose-file>] [-s <dbtype>] [-l <language>] [-o <consensus-type>] [-i <imagetag>] [-v]
    <mode> - one of 'up', 'down', 'restart', 'generate' or 'upgrade'
      - 'up' - bring up the network with docker-compose up
      - 'down' - clear the network with docker-compose down
      - 'restart' - restart the network
      - 'generate' - generate required certificates and genesis block
      - 'upgrade'  - upgrade the network from version 1.3.x to 1.4.0
    -c <channel name> - channel name to use (defaults to "mychannel")
    -t <timeout> - CLI timeout duration in seconds (defaults to 10)
    -d <delay> - delay duration in seconds (defaults to 3)
    -f <docker-compose-file> - specify which docker-compose file use (defaults to docker-compose-cli.yaml)
    -s <dbtype> - the database backend to use: goleveldb (default) or couchdb
    -l <language> - the chaincode language: golang (default) or node
    -o <consensus-type> - the consensus-type of the ordering service: solo (default) or kafka
    -i <imagetag> - the tag to be used to launch the network (defaults to "latest")
    -v - verbose mode
  byfn.sh -h (print this message)

Typically, one would first generate the required certificates and
genesis block, then bring up the network. e.g.:

        byfn.sh generate -c mychannel
        byfn.sh up -c mychannel -s couchdb
        byfn.sh up -c mychannel -s couchdb -i 1.4.0
        byfn.sh up -l node
        byfn.sh down -c mychannel
        byfn.sh upgrade -c mychannel

Taking all defaults:
        byfn.sh generate
        byfn.sh up
        byfn.sh down



consensus-type: 합의알고리즘 타입 선정
verbose mode: debug mode

--help = -h

사용자의 무언가의 정의하는 것에 의해서 실행하는 것.
generate 하는 부분이 티피컬리 하고 나옴
옵션값을 넣어서 실행하는건 이렇게 하라 라고 정의

자 이제 내부적으로 어떻게 작동하는지 보자

./byfn.sh up 을 보통하는데 generate 를먼저 해보자

pt fabric 특징에서 PKI 디지털 인증기반의 네트워크 구축
-> PKI는 공개키 기반구조
PKI에서는 공개키와 비밀키 두가지 키를 사용하는데
A를 공개키로 암호화
이 암호화된 공개키를 복호화 할 때, 비밀키로만 가능하고
A를 비밀키로 암호화 하게되면 공개키로만 복호화가 가능하게 만든 시스템

A - 개인키 공개키
B - 개인키 공개키
를 둘다 가지고 있고
A가 무언가 네트웍에 파일을 올릴때
A는 이 파일을 A의개인키로 암호화를 해서 업로드 하게 되고
A가 암호화했다고 서명이 되어 있으면,
B가 이걸 열어보고 싶을때 A에게 공개키를 요청을 하게되고
이걸 받아오면 이 파일을 열어볼 수 있다.

공개키는 공유하는 주소의 의미이고,
개인키로는 암호화 및 개인소유. 오픈은 ㄴㄴ해야함.

조직마다 대표피어들이 있다. 이를 엥커피어로 표시?
오더러에 들어가는 피어 하나
채널에 해당하는 블록? 피어?

.gitignore에 *.tx, *.block이 들어가는 이유가 공개키부분

generateCerts
replacePrivatekey
generateChannelArtifacts 들이 생성되는 부분

$ ./byfn.sh generate
후
/c/Users/강의실/Desktop/0725/fabric-samples/bin/cryptogen

경로 표시는 아 여기서 불러오는구나 하고,

fucntion generateCerts()가 실행이 되어서 그럼

fucntion generateCerts() 에서 
cryptogen generate --config=./crypto-config.yaml 요 한줄 실행시키려고
많은게 존재하는것.
if 첫구문에 "$?" 가나오면 exit 하게 되는데 저게 뭐가 없는거래. 뭐가 없는걸 받아왔다그랬나
(개빨라서 못들음)

함수를 만들때 cryptogen 사용
1. 파일이 있는지 검사
2. 사용
3. 정상적으로 작동을 했는지 검사.

위 123을 해줘야 하는데, 123을 꼭 해줘야하고, 그러다 보니 코드가 길어짐.

실제로 실행되는 코드들은 10줄아 안됨.
123을 해야 하다보니 코드들이 길어짐.
program의 detail은 1,3이 얼마나 잘 되어있는가 의 차이

$?= 명령어를 실행하고 그 결과를 가지고 오는 특수 기호? 명령어 래.

res 이걸 검사해서 정상적으로 출력이 됐다 하면 된거고,
안됐으면 fail로 ㄱㄱ

--config=./crypto-config.yaml 이 파일을 보자.
보게 되면
crypto-config에 생성이 됨.
인증서 생성 프로그램.

./cryptogen --help 하게 되면
(bin 경로)
이거에 또 설명이 나오는데,

crypto-config.yaml 보면

PeerOrgs 에 count 는 crypto-config내 피어, 조직들에 생성되는 수 변경

자 다음 repalcePrivateKey() 얘는 무시하고 넘어가도 된대.
뭐 파일들을 카피하고 하는건데, 잘 쓰진 않는대.

시원하게넘어가버리네

자 다음 generateChannelArtifacts ()
얘도 마찬가지로 처음에 검사를 하고.
얘가 있니? 하고 물어보고 없으면 에러.

실행을 해버리고,
echo 출력 후에.
bin/configtxgen 실행
하고 출력이 되는데.
if로 세트들이 있는데,
consensus_type에서 $가 있으니 변수를 가지고 오는데,
solo냐 kafka냐 에 따라~
우린 값을 넣어보지 않았는데, consensus_type은 검색하면 solo로 default 값이
들어가있음ㅋ

solo라서 이게 실행 되고 kafka였으면 저게 실행 됐겠지.

output 뭐시기가 나오는데, 여기서 genesis.block을 생성

앞에있는 명령어들은 찬찬히 뜯어보면

마찬가지로 bin folder 에서 ./configtxgen --help 쳐 보면
조건들이 굉장히 많이 나옴.
위 실행 조건 출력들 중에
-profile string에  configtx.yaml 을 불러오는데, 이 파일 코드를 뜯어보면
Profiles: 항이 나옴.

이 항안에 보면 오더러 올개나이제이션 컨소시엄 등 항들 이 나오면서
프로파일을 설정하게 됨.

어떤 노드에서 누가 대표가 될거냐
이 genesis.block에는 그런 피어들에 대한 것들이 정의가 되어 있음.

Consortiums: 컨소시엄항 아래는 이 연합 안에 어떤 기업들을 붙여줄거냐
하는 것들이, 어떤 기업과 통신을 하는지 를 설정

*의 의미는 어디서 이거를 참조를 해라 하는 위치에 대한 정의표시

위로 존내 올리면 Organizations: 항이 있고 그걸 찾으면,
&표시가 나오는데, &는 golang에서 위치를 표시하는거고,
*은 거기로 가세요 임.
그래서 한번만 해놓고 저위치로 가세요~ 해서 반복적으로 나오는 항들이
여기서 불러와서 이러이러한 정보들이 들어가게 됨.
*가면 Org12 뭐 다 있음.

복호 통신이기 때문에 통신이고 뭐고 이 이름으로 가능하고


networks: 보면 byfn이 있네?

그래서 갑자기 그걸 의미하고
결론은 오더러랑 누가 통신을 하느냐 래.

뜬금 뜬금 개뜬금.

(근데 if는 알겠는데 fi는 뭐냐)

그리고 실행한 결과에 대해 다시 검사.

결론은 앞뒤로 검사해야 하기 때문에 30줄 가량을 소비.

그다음은 채널 정보를 생성함.
channel.tx 의 생성

configtxgen 을 똑같이 사용하고 조건들이 들어가고, channel ID 가 들어가는데,
이 때 채널이름과 앞에 genesis.block 에 profile 이름과 같으면 오류가 난대.
왜인지는 자기도 모른대.

profiles 항에서 TwoOrgs 항에 보면
capabilities: 에 보면 어떤 기관들을 참가시키겠다 하는 내용이 나오고
그 목록이 organizations 항에 있고,

위에랑 똑같대.

OrdererCapabilities 검색해서 보면 위에 주석이랑 해서 다 달려있음.

이 인증서들을 이용해서 어떻게 네트워크가 작동을 하는지 를 할 차례

generate를 했기때문에
이제 up을 해볼 차례

hyperledger fabric docs - google it

정상적으로 실행이 되면
peer 4개
oderer 1개
cli server 1개 가 뜸

peer 0  org1
peer 1
peer 0  org 2
peer 1 
각각 4개의 peer에 왔다갔다 하면 복잡
그래서 cli server를 이용함.

install 채널에 참가중인 모든 피어
instanticate 채널 하나만

tutorials - building your first network
install and instantiate chaincode

-n name -v version

chaincode for developer - guide
terminal 1~3 등은 terminal 을 추가해서 하라는 말.

terminal1 - chaincode peer cli 3개의 컨테이너가 생성이 되야함.
termianl2 - chaincode build
sacc folder

fabcar\javascript

enrolladmin.js - admin 인증서
registeruser.js - 유저 인증서

위 두 인증서가 wallet에 들어감.

invoke.js 를 뜯어보자.

BlockChain tech tree

ETH
EOS		+ 퀀텀
Fabric

EOS는 3위. 2018.6 - 자료가 없음.
ETH는 2015. 6
fabric 2018.
난이도는 EOS가 제일 쉽지만 설치가 정말 까다롭다.
docker를 사용하면 쉽게 설치가 가능하다?

github에 EOS 치면 나온다.
일단 C++이다.
맥, ubuntu, centos... 윈도우는...?

golang
node.js -> 코스모스 SDK(블록체인을 만드는 framework)

npm site (notion?? lotion??) 가면 있대.

JS
ETH
DB(mysql, mongodb, Redis, mariadb)

devops Docker K8s			Jenkins

vue
react
angular

1. tool 사용능력
2. git
3. bash
4. 문서 ( API ) -> gitbook, swagger

boilerplate

비동기처리 때문에
데이터처리나 기타 이유로 python을 사용
인공지능도.

엑셀 - VBA
PHP - server + client

node.js
font

JS 책.
인사이드 자바스크립트
모던 웹을 위한 Node.js 프로그래밍

JS 에서 가장 중요한것 = es6
https://sanghaklee.tistory.com/54