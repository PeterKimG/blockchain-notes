이더리움과 솔리디티

solidity 언어 기반의 이더리움 애플리케이션 개발 플랫폼
재귀호출 = 자기자신을 부르는거래
가벼운 (빠른실행을 위한, 최대한 적은 언어로 많은 기능을 실행하기위한)
언어가 필요해 솔리디티를 개발
기존 개발자들이 알고있는 언어를 이용해야 하기 때문에, 자바 연결
컨트랙트를 자바로 짝 열어볼 수 있음
API -> ABI
외부에 노출하는 함수를 ABI라고 해서 인터페이스를 통해 스마트컨트랙트에
연결을해서 내가 원하는 어쩌구를 실행 가능
스마트 컨트랙트를 계속 가동중에 어떤 이벤트가 일어났을 때,
실행? 대처? 가 가능
무결성 보장 = 권한있는 사람만 data를 조작할 수 있게

비트코인에서의 수수료 = 이더리움 gas
비트코인 수수료는 비트코인 가격변동에 따라 널뛰지만
이더리움에서는 이를 막기위해 제한을 두고 있다.
가스비가 높아지면 가스 상한값을 설정해 컨트랙트가 실행 안되게 할 수 있다.
스마트 컨트랙트가 무제한으로 제공되는게 아니라
컴퓨팅파일을 빌려쓰는 것이기 때문에, 채굴자 node에 가스비용은 지급이된다.

root 값을 stack trace로 관리

이더리움은 머클트리에 패트리샤 트리를 사용
머클트리는 2값 top root만 관리하는데 패트리샤 트리는 3가지 값 이상을 이용 가능
각 블록마다 트랜잭션의 머클트리에 대한 정보가 있는데,
패트리샤 트리는 전에 있던 정보들을 다 가지고 있지 않고, 뭐뭐만 
저장하기 때문에, 가볍다는 장점이 있는데, 단점은 다음에

6 node 이상이  관여가 되야 확정되는데 반해
이더리움은 블록생성 속도가 빨라 동시생성 확률이 높다
uncle block도 2~30% 보상금을 지급
uncle block이 많아지면 많아지면 많아질수록
포크되어(나눠져 없어지는걸) 막기위해 블록이 가지고있는 난이도가 높을수록
너로만 포크된게 맞아 라고 검증하게 된다
니가 메인이 되는게 맞네 라고 (이쪽 라인이 맞아) 라고 결정하게되면
그쪽을 버리고 특정라인에 계속 붙게 된다

UTXO를 잔여가 남아있는 트랜잭션이라고 함
계좌기반으로 관리를 하는게 가장 큰 차이
단점은 잔액을 확인 하려고 하면, 합계를 계산을 하려면
트랜잭션 전체를 까봐서 연산해야 하기 때문에, 느리다.
자료화를 해서 인덱싱을 하기 때문에 빠른 처리가 가능한건데 안돼
병렬 처리에는 쥐약. 인덱싱 정렬을 해 놓는다는 것은
어떤것에 대한 대처가 느리다는 의미
병렬 처리가 느린 대신 블록생성 속도가 빠르다

JAVA vm virtual machine
자바 머신이 편한게 메모리 관리라던지 자료형 같은걸 vm에서 개발자가
잘못 짠다고 해도 자동으로 걸러주는 그런 기능인데
이더리움에도 그런 vm을 가동하고있다 ethereum virtual machine
블록체인에서는 가상머신 실행하라는 신호를 받는다고 하면
opcode에서 바이트코드를 받아들여서 컨트랙트를 vm으로 작성하게 된다

EVM에서 실행하는 종류는
토큰거래나 계약내부 함수 호출, 컨트랙트가 가지고있는 잔액 저장트리 등등
EVM을 작동하

이더리움에서 네트웍 구축 3가지
24시간 돌아가고 있는데 node를 
이더리움을 설치할 때 내가 원하는 사람들만 이용가능한 private한 설치환경 구축가능

test network는 글로벌하게 구축이 되어있음
테스트 네트워크에 내가 가지고있는 어쩌구가 정보가 맞는지 확인할때 이용
자격증면 알고리즘으로 돌아가는 테스트 네트워크
kovan은 지불증명 알고리즘 (합의 알고리즘) 테스트 네트워크로 구축돼 있음
잘 돌아가는지 확인은 여기서 하래

비트코인에선 논스를 계산할때 쓴다고 했는데
EOA에서 거래할때마다 count 값이 1씩 증가
CA 계약 생성시 1 증가. 비트코인과는 좀 다르다

블록의 크기를 무제한 적으로 쓸 수 있게 storage 영역이라는 것을 별도로 사용중
storage root는 별도의 공간에다가 저장공간을 할당할 수 있고
할당된 공간에서 차지할 수 있는 블록만 저장해놓고 활용할 수 있대
같은 node 내에서 공용사용 가능하고 p2p 나 별도의 다른 서버나 클라우드로
저장할 수 도 있다. 이를 추적할 수(조회할 수) 있는 값만 저장해 놓으면 된다

스마트 컨트랙트가 어느 부분에 되어있는지 hash 값을 불러오게 되어있고
전역상태 트라이 라는 것으로 다 가능하게 연결되어있다
트랜잭션 루트가 따로있고 거래가 A -> B로 보냈다는 것을 기록하기 위해
log 기록처럼 영수증루트 라는 것으로 관리하고 있다

비트코인에선 거래를 트랜잭션이라고 했는데
이더리움에선 거래할 때 주고받는 data들을 트랜잭션이아니라
메시지 라는 명칭으로 지칭
거래는 비트코인에서 맡고있는 기능과 같은 기능을 하고
메시지 라는 이더리움만 가지고 있는 전달 data는 
스마트 컨트랙트가 전달될 때 보내는 덩어리
EVM을 실행하면 전달 메세지가 전달된다
opcode가 연산 데이터들이 저장된 영역이라고 했는데, 
다른 메세지 , 스마트컨트랙트의 특정 함수의 이름이
call 과 delegate call 이라고하고 메세지가 생성 됨

블록체인에 저장된 data는 누구도 변조하지 않아야 하니까
처음부터 외부에서 들어올 수 없게 디자인됨
dApp 같은 걸 만드려고 하니까 외부에서 들어오는걸 블록체인에 담고싶으니까
중간중간 변경된 data를 받고싶은데
스마트 컨트랙트를 작성했는데 중간에 업데이트가 필요하다
중간에 신뢰할 수 있는 data를 받아야 하는데 이 기술을 이를 oracle 이라고 함. 
외부 스마트 데이터를 받아야하는데 TLS Notary
정보를 전달 받는 과정은 안전한데 넣어준 data를 누가 넣었는지
기존 데이터는 신뢰성이 있었으나, 갑자기 들어온 데이터는 검증이 안되었기 때문에
데이터를 생성하는것 자체도 신뢰성이 있는 data를 수신하는 것도 
한 비지니스 영역이래

저장공간도 다양한 방식으로 사용되도록 design되었는데
토렌트와 같은 p2p 분산저장같이 공간을 활용할 수 있게 되어있음
해쉬값\\

이더리움을 개발을 할때
비트코인은 이런 개발 툴들이 없는데 dApp에서 돌아가는 걸 만들기 위한툴이 있는데
대표적으로 3개
가냐슈는 가볍고 전반적 interface가 그래픽 GUI 시스템으로 버튼으로 클릭해서-
리믹스는 프로그램 자체를 무설치로 브라우저에서 통합적으로 이용 가능
솔리더티를 바로 확인하고 검증하고 - 까지 한번에 가능
오픈제플린은 스마트 컨트랙트 라는게 기능이라는게 용도가 뻔하대 많지가 않아서
토큰을 발행하고 분배하고 어떤 계약에대해 언제 실행하고 이런것들이 이미
탬플릿으로 해서 정의가 되어있는데 요런데에는 요런걸 쓰세요 하고
정리가되어 있고 여태까지 문제가 없었다는 것을 보여주고 있고
내가 원하는걸 갖다가 적용할 수 있게 되어있음
자주쓰게될거래

